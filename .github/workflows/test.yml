name: Code Test

on:
  - push

jobs:
  unittest:
    name: Code test
    runs-on: 'ubuntu-18.04'
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    container:
      image: python:${{ matrix.python-version }}-${{ matrix.os }}
      options: --user root
    strategy:
      fail-fast: false
      matrix:
        os:
          - 'buster'
          - 'bullseye'
        python-version:
          - '3.6'
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 20
      - name: Show Python Version
        run: |
          python -V
      - name: Set up system dependences on linux
        if: ${{ matrix.os != 'alpine' }}
        run: |
          apt-get update
          apt-get install -y tree cloc wget curl make graphviz
          apt-get install -y libxml2-dev libxslt-dev python-dev  # need by pypy3
          dot -V
      - name: Set up system dependences on alpine
        if: ${{ matrix.os == 'alpine' }}
        run: |
          apk update
          apk add tree cloc wget curl make graphviz
          apk add libxml2-dev libxslt-dev
          dot -V
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade flake8 setuptools wheel twine
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      - name: Test the basic environment
        run: |
          python -V
          pip --version
          pip list
          tree .
          cloc pji
          cloc test
      - name: Run unittest
        env:
          CI: 'true'
          LINETRACE: 1
        run: |
          make unittest
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  try_build_cli:
    name: Build Standalone CLI
    runs-on: 'ubuntu-18.04'
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    container:
      image: python:${{ matrix.python-version }}-${{ matrix.os }}
      options: --user root
    strategy:
      fail-fast: false
      matrix:
        os:
          - 'buster'
        python-version:
          - '3.6'
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 20
      - name: Show Python Version
        run: |
          python -V
      - name: Set up system dependences on linux
        if: ${{ matrix.os != 'alpine' }}
        run: |
          apt-get update
          apt-get install -y tree cloc wget curl make graphviz
          apt-get install -y libxml2-dev libxslt-dev python-dev  # need by pypy3
          dot -V
      - name: Set up system dependences on alpine
        if: ${{ matrix.os == 'alpine' }}
        run: |
          apk update
          apk add tree cloc wget curl make graphviz
          apk add libxml2-dev libxslt-dev
          dot -V
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade flake8 setuptools wheel twine
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip install -r requirements-build.txt
      - name: Test the basic environment
        run: |
          python -V
          pip --version
          pip list
          tree .
      - name: Run unittest
        env:
          CI: 'true'
          LINETRACE: 1
        run: |
          make build
          ls -al dist
          dist/pji -v
          dist/pji -h
      - name: Get package version
        run: |
          make build
          python -c 'from pji.config.meta import __VERSION__;print(__VERSION__)'
          echo "PACKAGE_VERSION=$(python -c 'from pji.config.meta import __VERSION__;print(__VERSION__)')" >> $GITHUB_ENV
          echo "GIT_COMMIT_ID=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "CPU_ARCH=$(uname -m)" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: pji-v${{ env.PACKAGE_VERSION }}-${{ env.CPU_ARCH }}-${{ matrix.python-version }}-${{ env.GIT_COMMIT_ID }}
          path: dist
